// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role enum with all possible user roles
// Note: STAFF and CUSTOMER are kept for backward compatibility
// New users should use USER instead of CUSTOMER
enum Role {
  USER
  ADMIN
  RESTAURANT_OWNER
  STAFF
  CUSTOMER
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String     @unique
  password     String
  role         Role       @default(USER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  orders       Order[]
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  menuItems   MenuItem[]
  orders      Order[]
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  category     String?
  isAvailable  Boolean    @default(true)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  status       OrderStatus @default(PENDING)
  total        Float
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
} 